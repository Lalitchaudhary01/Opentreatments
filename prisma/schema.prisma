generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  phone      String?   @unique
  password   String? // null if Google OAuth
  isVerified Boolean   @default(false)
  otp        String?
  otpExpiry  DateTime?
  createdAt  DateTime  @default(now())
  role       Role      @default(USER)

  // Relations
  accounts Account[]
  sessions Session[]
  blogs    Blog[] // authored blogs
  comments Comment[] // user comments
  likes    Like[] // user likes
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Blog {
  id       String  @id @default(cuid())
  title    String
  content  String
  authorId String
  image    String? // optional image

  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[] // comments on blog
  likes     Like[] // likes on blog
  tags      BlogTag[] // many-to-many tags
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  blogId    String
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  blogId    String
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([blogId, userId]) // prevent duplicate likes
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  blogs BlogTag[]
}

model BlogTag {
  blogId String
  tagId  String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
}

model Hospital {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  address     String?
  city        String?
  state       String?
  country     String?
  phone       String?
  email       String?
  website     String?
  logo        String? // optional logo image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  services   Service[]
  facilities Facility[]
  insurances Insurance[]
  doctors    Doctor[]
  procedures Procedure[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  cost        Float?
  description String?
  hospitalId  String
  hospital    Hospital @relation(fields: [hospitalId], references: [id])
}

model Facility {
  id          String   @id @default(cuid())
  name        String
  description String?
  hospitalId  String
  hospital    Hospital @relation(fields: [hospitalId], references: [id])
}

model Insurance {
  id         String   @id @default(cuid())
  name       String
  provider   String?
  hospitalId String
  hospital   Hospital @relation(fields: [hospitalId], references: [id])
}

model Doctor {
  id             String   @id @default(cuid())
  name           String
  specialization String
  experience     Int? // years of experience
  profilePic     String?
  hospitalId     String
  hospital       Hospital @relation(fields: [hospitalId], references: [id])
}

model Procedure {
  id          String   @id @default(cuid())
  name        String
  description String?
  cost        Float?
  duration    String? // e.g., "2 hours", "3 days"
  hospitalId  String
  hospital    Hospital @relation(fields: [hospitalId], references: [id])
}
