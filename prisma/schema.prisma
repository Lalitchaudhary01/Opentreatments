generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

//user side

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  phone      String?   @unique
  password   String?
  isVerified Boolean   @default(false)
  otp        String?
  otpExpiry  DateTime?
  createdAt  DateTime  @default(now())
  role       Role      @default(USER)

  // Relations
  accounts Account[]
  sessions Session[]
  blogs    Blog[]
  comments Comment[]
  likes    Like[]
  policies Policy[] // ✅ relation: user policies

  // Add this line for independent consultations
  independentConsultations IndependentConsultation[]
  IndependentDoctor        IndependentDoctor?
  IndependentReview        IndependentReview[]
  Notification             Notification[]
  AdminAction              AdminAction[]
}

//
// ---------------------------
// Authentication of users
// ---------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

//
// ---------------------------
// Blogs
// ---------------------------
model Blog {
  id        String    @id @default(cuid())
  title     String
  content   String
  authorId  String
  image     String?
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  tags      BlogTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  blogId    String
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  blogId    String
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([blogId, userId])
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  blogs BlogTag[]
}

model BlogTag {
  blogId String
  tagId  String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
}

//
// ---------------------------
// Hospital + Related Models
// ---------------------------
model Hospital {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  description        String?
  address            String?
  city               String?
  state              String?
  country            String?
  phone              String?
  email              String?
  website            String?
  logo               String?
  image              String?
  verified           Boolean  @default(false)
  emergencyAvailable Boolean  @default(false)
  bedCount           Int?
  availableBeds      Int?
  rating             Float?
  totalReviews       Int?
  type               String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  services   Service[]
  facilities Facility[]
  insurances Insurance[]
  doctors    Doctor[]
  procedures Procedure[]
  estimates  Estimate[] // ✅ link to estimates
}

model Service {
  id          String   @id @default(cuid())
  name        String
  cost        Float?
  description String?
  hospitalId  String
  hospital    Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
}

model Facility {
  id          String   @id @default(cuid())
  name        String
  description String?
  hospitalId  String
  hospital    Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
}

model Insurance {
  id         String   @id @default(cuid())
  name       String
  provider   String?
  cashless   Boolean  @default(false)
  hospitalId String
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
}

//hospital side doctors
model Doctor {
  id             String   @id @default(cuid())
  name           String
  specialization String
  experience     Int?
  profilePic     String?
  hospitalId     String
  hospital       Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
}

model Procedure {
  id          String   @id @default(cuid())
  name        String
  description String?
  cost        Float?
  duration    String?
  hospitalId  String
  hospital    Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  estimates Estimate[]
}

//
// ---------------------------
// ✅ Insurance Policies
// ---------------------------
model Policy {
  id           String   @id @default(cuid())
  userId       String
  name         String
  provider     String?
  policyNumber String?
  sumInsured   Float
  deductible   Float    @default(0)
  coPay        Float    @default(0) // % value
  startDate    DateTime
  endDate      DateTime
  cashless     Boolean  @default(false)
  pdfUrl       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  estimates Estimate[]
}

//
// ---------------------------
// ✅ Insurance Estimates
// ---------------------------
model Estimate {
  id            String   @id @default(cuid())
  policyId      String
  hospitalId    String
  procedureId   String
  procedureCost Float
  coveredAmount Float
  outOfPocket   Float
  createdAt     DateTime @default(now())

  policy    Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)
  hospital  Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  procedure Procedure @relation(fields: [procedureId], references: [id], onDelete: Cascade)
}

//
// ---------------------------
// Pharmacy + Medicines
// ---------------------------
model Pharmacy {
  id        String  @id @default(cuid())
  name      String
  address   String?
  city      String?
  state     String?
  phone     String?
  latitude  Float?
  longitude Float?

  medicines Medicine[]
}

model Medicine {
  id               String   @id @default(cuid())
  name             String
  genericName      String?
  form             String?
  strength         String?
  packSize         String?
  price            Float
  availability     Boolean  @default(true)
  slug             String?  @unique
  description      String?
  rxRequired       Boolean? @default(false)
  therapeuticClass String?

  pharmacyId String
  pharmacy   Pharmacy @relation(fields: [pharmacyId], references: [id])

  priceTrends   PriceTrend[]
  substitutes   Substitute[] @relation("OriginalMedicine")
  substitutedBy Substitute[] @relation("SubstituteMedicine")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PriceTrend {
  id         String   @id @default(cuid())
  medicineId String
  medicine   Medicine @relation(fields: [medicineId], references: [id])
  price      Float
  date       DateTime @default(now())
}

model Substitute {
  id                   String @id @default(cuid())
  medicineId           String
  substituteMedicineId String

  medicine   Medicine @relation("OriginalMedicine", fields: [medicineId], references: [id])
  substitute Medicine @relation("SubstituteMedicine", fields: [substituteMedicineId], references: [id])
}

//independt docots  
enum DoctorStatus {
  PENDING
  APPROVED
  REJECTED
}

model IndependentDoctor {
  id     String @id @default(cuid())
  userId String @unique // link to User model
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name           String
  specialties    String[]
  specialization String
  experience     Int?
  gender         String?
  profilePic     String?
  fees           Float?
  rating         Float    @default(0)
  totalReviews   Int      @default(0)
  languages      String[]
  availability   Json?
  badges         String[]
  city           String?

  status DoctorStatus @default(PENDING) // ✅ pending until admin approves

  consultations IndependentConsultation[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  IndependentReview IndependentReview[]
}

enum ConsultationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

model IndependentConsultation {
  id                String             @id @default(cuid())
  doctorId          String
  doctor            IndependentDoctor  @relation(fields: [doctorId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  slot              DateTime
  duration          Int?
  status            ConsultationStatus @default(PENDING) // enum used here ✅
  mode              String             @default("online")
  fee               Float?
  paymentId         String?
  paymentStatus     String             @default("unpaid")
  notes             String?
  prescription      String?
  cancelReason      String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  IndependentReview IndependentReview?
  Payment           Payment?
}

model IndependentReview {
  id             String                  @id @default(cuid())
  consultationId String                  @unique
  consultation   IndependentConsultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)

  doctorId String
  doctor   IndependentDoctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  rating   Int // 1 to 5 stars
  feedback String?

  createdAt DateTime @default(now())
}

enum NotificationType {
  CONSULTATION_REQUEST
  CONSULTATION_STATUS
  ADMIN_APPROVAL
}

model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    NotificationType
  message String
  isRead  Boolean          @default(false)

  createdAt DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Payment {
  id             String                  @id @default(cuid())
  consultationId String                  @unique
  consultation   IndependentConsultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)

  amount        Float
  status        PaymentStatus @default(PENDING)
  provider      String? // Razorpay/Stripe
  transactionId String? // gateway ka id
  createdAt     DateTime      @default(now())
}

model AdminAction {
  id      String @id @default(cuid())
  adminId String
  admin   User   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  actionType String
  targetId   String // doctorId / consultationId / userId etc.
  targetType String // "DOCTOR" | "CONSULTATION" | "USER"
  details    String?

  createdAt DateTime @default(now())
}
